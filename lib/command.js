// Generated by CoffeeScript 1.6.3
var Colors, colorizer, colors, existsSync, fs, getDotWrContents, getVersion, logError, logInfo, logSuccess, optimist, path, printHelp, wr;

fs = require('fs');

path = require('path');

colors = require('colors');

optimist = require('optimist');

wr = require('./wr');

existsSync = fs.existsSync || path.existsSync;

Colors = null;

exports.run = function() {
  var args, argv, cmd, color, files, opts, stats, type, _ref;
  args = process.argv.slice(2);
  if (args.length === 0) {
    if (existsSync('.wr')) {
      stats = fs.statSync('.wr');
      if (stats.isFile()) {
        args = getDotWrContents(".wr");
      }
    }
  }
  optimist = optimist(args);
  argv = optimist.usage('Usage: $0 [options] command [file ...]').alias('v', 'verbose').boolean('verbose').describe('verbose', 'generate verbose diagnostics').alias('c', 'chime')["default"]('chime', 5).describe('chime', 'generate a diagnostic every so many minutes').boolean('exec').describe('exec', 'run command with exec instead of spawn').alias('p', 'poll').describe('poll', 'use poll-based file watching').boolean('V').describe('V', 'print the version').string('color-stdout')["default"]('color-stdout', '').describe('color-stdout', 'color of stdout').string('color-stderr')["default"]('color-stderr', 'red').describe('color-stderr', 'color of stderr').string('color-info')["default"]('color-info', 'blue.inverse.white').describe('color-info', 'color of info messages').string('color-success')["default"]('color-success', 'green.inverse.white').describe('color-success', 'color of success messages').string('color-error')["default"]('color-error', 'red.inverse.white').describe('color-error', 'color of error messages').boolean('?').describe('?', 'print help').boolean('h').describe('h', 'print help').argv;
  if (argv.chime) {
    if (typeof argv.chime !== 'number') {
      console.error("the chime option value is not a number");
      process.exit(1);
    }
  }
  if (argv.poll) {
    if (typeof argv.poll !== 'number') {
      console.error("the poll option value is not a number");
      process.exit(1);
    }
  }
  if (argv["?"] || argv.h) {
    printHelp();
  }
  if (argv.V) {
    console.log(getVersion());
    process.exit(0);
  }
  args = argv._;
  if (args.length === 0) {
    printHelp();
  }
  cmd = args[0];
  if (cmd === '?') {
    printHelp();
  }
  if (args.length === 1) {
    files = ["."];
  } else {
    files = args.slice(1);
  }
  opts = {};
  opts.verbose = argv.verbose;
  opts.chime = argv.chime;
  opts.exec = argv.exec;
  opts.poll = argv.poll;
  Colors = opts.colors = {
    stdout: argv['color-stdout'],
    stderr: argv['color-stderr'],
    info: argv['color-info'],
    success: argv['color-success'],
    error: argv['color-error']
  };
  _ref = opts.colors;
  for (type in _ref) {
    color = _ref[type];
    opts.colors[type] = colorizer(color);
  }
  opts.logError = logError;
  opts.logSuccess = logSuccess;
  opts.logInfo = logInfo;
  /*
  console.log """
      cmd:         #{cmd}
      files:       #{JSON.stringify(files)}
      opts:        #{JSON.stringify(opts)}
      argv: #{JSON.stringify(argv,null,4)}
  """
  */

  return wr.run(cmd, files, opts);
};

colorizer = function(colorNames) {
  var colorName, _i, _len;
  colorNames = colorNames.split(".");
  for (_i = 0, _len = colorNames.length; _i < _len; _i++) {
    colorName = colorNames[_i];
    if (colorName === "") {
      continue;
    }
    if (typeof colors[colorName] !== "function") {
      console.log("invalid color: " + colorName);
      process.exit(1);
    }
  }
  return function(string) {
    var _j, _len1;
    for (_j = 0, _len1 = colorNames.length; _j < _len1; _j++) {
      colorName = colorNames[_j];
      if (colorName === "") {
        continue;
      }
      string = colors[colorName].call(colors, string);
    }
    return string;
  };
};

printHelp = function() {
  optimist.showHelp();
  console.error("for more info see: https://github.com/pmuellr/wr");
  return process.exit(1);
};

getDotWrContents = function() {
  var args, contents, groups, line, lines, pattern, _i, _len;
  contents = fs.readFileSync('.wr', 'utf8');
  lines = contents.split('\n');
  args = [];
  for (_i = 0, _len = lines.length; _i < _len; _i++) {
    line = lines[_i];
    line = line.replace(/#.*/, '');
    line = line.replace(/(^\s+)|(\s+$)/g, '');
    if (line === '') {
      continue;
    }
    if (line[0] === '-') {
      pattern = /(\S*)(\s*(.*))/;
      groups = line.match(pattern);
      if (groups[3] !== '') {
        args.push(groups[1]);
        args.push(groups[3]);
        continue;
      }
    }
    args.push(line);
  }
  return args;
};

getVersion = function() {
  var json, packageJsonName, values;
  packageJsonName = path.join(path.dirname(fs.realpathSync(__filename)), '../package.json');
  json = fs.readFileSync(packageJsonName, 'utf8');
  values = JSON.parse(json);
  return values.version;
};

logError = function(message) {
  var date, time;
  date = new Date();
  time = date.toLocaleTimeString();
  message = Colors.error("" + time + " wr: " + message);
  return console.log(message);
};

logSuccess = function(message) {
  var date, time;
  date = new Date();
  time = date.toLocaleTimeString();
  message = Colors.success("" + time + " wr: " + message);
  return console.log(message);
};

logInfo = function(message) {
  var date, time;
  date = new Date();
  time = date.toLocaleTimeString();
  message = Colors.info("" + time + " wr: " + message);
  return console.log(message);
};
